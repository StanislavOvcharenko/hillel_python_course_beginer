print(abs(-1))
# Проверяет все элементы полседоватильности на заполненность, дает Тру если все элементы не пустые
print(all(["Hello", "", "World"]))
# Проверяет все элементы полседоватильности на заполненность, дает Тру если хоть один элемент не пустой
print(any(["Stas", "", ""]))
# Проверяет элемент и возвращет Тру или Фолс
print(bool(0))
# функция создает словарь
a = dict(vw = "golf")
print(a)
# Вбзвращает все доступные методы для указанного обьекта
print(dir([]))
''' Функция принимает последовательность и принменяет к каждому элементу указаную функцию, если получает значенте Тру
добавляет его в обьект фильтр'''
numbers_a = [0, 5, 6, 9, 11, 0]
numbers_filter = list(filter(bool, numbers_a))
print(numbers_filter)
# Функия показывает все что есть в глобальной сфере видимости
globals()
# Открывает документацию по обекту
help(bool)
# показывает id обьекта
print(id(numbers_a))
# Запрашиевет ввод у пользователя
#input("Введите ваше имя")
# Возвращает цело число даже если было введено как строка
n = int("1")
print(type(n))
# Проверяет элемент на принадлежность к классу
print(isinstance(1, int))
# Функция возвращает длину последовательности
print(len([1, 2, "hhh", 9]))
# Функция создает список
list_a = list()
print(type(list_a))
# Функция показывет что есть в локальной области видимости
locals()
# Функция применяет к каждому элементу в последовательности указаную функцию
numbers_a = [0, 5, 6, 9, 11, 0]
def x(n):
    return n + 10
n_numbers = list(map(x, numbers_a))
print((n_numbers))
# Функции возвращают максимальные и минимальные значения из последовательности
print(min(numbers_a))
print((max(numbers_a)))
# Возвращает Юникод символа
print(ord('a'))
# Возвращает значение в терминал
print(ord('a'))
# функция создает последовательность чисел
a = [i+10 for i in range(5, 15)]
print(a)
# Функция переворачивает последоватильность
print(list(reversed(numbers_a)))
# создает множество
set_a = set
# Сортирует последовательность по возрастанию, можно установить вторым значением key= нужный нам ключ
sort_numbers = sorted(numbers_a)
print(sort_numbers)
# Сумирует числа в последовательности
print(sum(numbers_a))
# Создает кортеж
tuple_a = tuple()
#показывает тип обьекта
print(type(tuple_a))
# Функция сшивает 2 последовательности по индексу, если у последовательностей разная длина то сшивает по меньшей
y = "acer"
u = "nitro"
i = dict(zip(y,u))
print(i)